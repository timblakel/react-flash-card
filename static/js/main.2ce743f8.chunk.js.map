{"version":3,"sources":["components/FlashCardViewer.tsx","components/ControlButtons.tsx","components/EditFlashCards.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["FlashCardViewer","currentCard","Col","Card","Body","isFront","Text","front","back","ControlButtons","setCurrentCard","setCardPile","cardPile","Container","Row","Button","onClick","flippedCard","currInd","indexOf","newPile","variant","className","nextInd","length","EditFlashCards","useState","newFront","setNewFront","newBack","setNewBack","style","textAlign","Form","Group","controlId","Label","Control","type","placeholder","onChange","event","target","value","newCard","id","localStorage","setItem","JSON","stringify","INITIAL_CARDS","getLocalCards","rawCards","getItem","parse","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2ce743f8.chunk.js","sourcesContent":["import { Col, Card } from \"react-bootstrap\";\r\nimport { flashCard } from \"../interfaces/flashCard\";\r\n\r\nexport function FlashCardViewer({currentCard}: {currentCard: flashCard}): JSX.Element {\r\n    return <Col>\r\n        <Card>\r\n            <Card.Body>\r\n                {currentCard.isFront && <Card.Text>\r\n                    {currentCard.front}\r\n                </Card.Text>}\r\n                {!currentCard.isFront &&<Card.Text>\r\n                    {currentCard.back}\r\n                </Card.Text>}\r\n            </Card.Body>\r\n        </Card>\r\n    </Col>\r\n}","import { Button, Col, Container, Row } from \"react-bootstrap\";\r\nimport { flashCard } from \"../interfaces/flashCard\";\r\n\r\nexport function ControlButtons({setCurrentCard, currentCard, setCardPile, cardPile}: {\r\n        setCurrentCard: (f: flashCard) => void, \r\n        currentCard: flashCard,\r\n        setCardPile: (f: flashCard[]) => void,\r\n        cardPile: flashCard[]\r\n    }): JSX.Element {\r\n    \r\n    function flipCard() {\r\n        let flippedCard: flashCard = {...currentCard};\r\n        flippedCard.isFront = !flippedCard.isFront;\r\n        setCurrentCard(flippedCard);\r\n        // console.log(`flipped card: ${JSON.stringify(flippedCard)}`);\r\n        // console.log(`cardPile ${JSON.stringify(cardPile)}`);\r\n        // console.log(`currentCard: ${JSON.stringify(currentCard)}`);\r\n        let currInd: number = cardPile.indexOf(currentCard,0);\r\n        let newPile: flashCard[] = [...cardPile];\r\n        newPile[currInd] = flippedCard;\r\n        setCardPile(newPile);\r\n    }\r\n\r\n    function nextCard() {\r\n        let currInd: number = cardPile.indexOf(currentCard,0);\r\n        let nextInd: number = (currInd + 1) % cardPile.length;\r\n        setCurrentCard(cardPile[nextInd]);\r\n    }\r\n\r\n    return <Col>\r\n        <Container>\r\n            <Row>\r\n                <Button onClick={flipCard} variant=\"primary\" className=\"m-2\">Flip Card</Button>\r\n            </Row>\r\n            <Row>\r\n                <Button onClick={nextCard} variant=\"secondary\" className=\"m-2\">Next Card</Button>\r\n            </Row>\r\n        </Container>\r\n    </Col>\r\n}","import React, { useState } from \"react\";\r\nimport { Button, Col, Container, Form, Row } from \"react-bootstrap\";\r\nimport { flashCard } from \"../interfaces/flashCard\";\r\nimport { FlashCardViewer } from \"./FlashCardViewer\";\r\n\r\nconst LOCAL_STORAGE_CARDS = 'flash-cards';\r\n\r\nexport function EditFlashCards({cardPile, setCardPile}: {cardPile: flashCard[], setCardPile: (f: flashCard[])=>void}): JSX.Element {\r\n    const [newFront, setNewFront] = useState<string>(\"Front\");\r\n    const [newBack, setNewBack] = useState<string>(\"Back\");\r\n\r\n    function saveCards(): void {\r\n        localStorage.setItem(LOCAL_STORAGE_CARDS,JSON.stringify(cardPile));\r\n    }\r\n\r\n    function addCard(): void {\r\n        let newId: number = cardPile[cardPile.length-1].id + 1;\r\n        let newCard: flashCard = {\r\n            id: newId,\r\n            front: newFront,\r\n            back: newBack,\r\n            isFront: true\r\n        }\r\n        setCardPile([...cardPile, newCard]);\r\n    }\r\n\r\n    return <Container className=\"border border-info p-2 m-4 ml-auto\">\r\n        <Row>\r\n            <Col style={{textAlign: \"left\"}}>\r\n                <Form>\r\n                    <Form.Group className=\"mb-1\" controlId=\"newCardFront\">\r\n                        <Form.Label>Front</Form.Label>\r\n                        <Form.Control type=\"text\" placeholder=\"card front\"\r\n                        onChange={(event: React.ChangeEvent<HTMLTextAreaElement>) => {\r\n                            setNewFront(event.target.value);\r\n                        }} />\r\n                    </Form.Group>\r\n\r\n                    <Form.Group className=\"mb-2\" controlId=\"newCardBack\">\r\n                        <Form.Label>Back</Form.Label>\r\n                        <Form.Control type=\"text\" placeholder=\"card back\" \r\n                        onChange={(event: React.ChangeEvent<HTMLTextAreaElement>) => {\r\n                            setNewBack(event.target.value);\r\n                        }} />\r\n                    </Form.Group>\r\n                    <Button onClick={addCard} variant=\"secondary\" type=\"reset\">Add Flash Card</Button>\r\n                </Form>\r\n            </Col>\r\n            <Col>\r\n                <Button variant=\"secondary\">Edit Current Card placeholder</Button>\r\n            </Col>\r\n        </Row>\r\n        <Row>\r\n            <Col>\r\n                <Button onClick={saveCards} variant=\"secondary\">Save Cards</Button>\r\n            </Col>\r\n        </Row>\r\n    </Container>\r\n}","import React, { useState } from 'react';\nimport { Container, Row, Col, Button } from 'react-bootstrap';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\nimport { FlashCardViewer } from './components/FlashCardViewer';\nimport { ControlButtons } from './components/ControlButtons';\nimport { flashCard } from './interfaces/flashCard';\nimport { EditFlashCards } from './components/EditFlashCards';\n\nconst INITIAL_CARDS: flashCard[] = [{\n    id: 1,\n    front: 'Front',\n    back: 'Back',\n    isFront: true\n  },\n  {\n    id: 2,\n    front: 'Up side',\n    back: 'Down side',\n    isFront: true\n  }]\n\nconst LOCAL_STORAGE_CARDS = 'flash-cards';\n\nfunction getLocalCards(): flashCard[] {\n  let rawCards: string | null = localStorage.getItem(LOCAL_STORAGE_CARDS);\n  // console.log(`rawCards: ${rawCards}`);\n  if (rawCards === null) {\n    return INITIAL_CARDS;\n  } else {\n    return JSON.parse(rawCards);\n  }\n}\n\nfunction App() {\n  const [cardPile, setCardPile] = useState<flashCard[]>(getLocalCards);\n  const [currentCard, setCurrentCard] = useState<flashCard>(cardPile[0]);\n\n  return (\n    <Container className=\"App\">\n      <Row>\n        <h1>Study Flash Cards</h1>\n      </Row>\n      <Row>\n        <ControlButtons \n        setCurrentCard={setCurrentCard} currentCard={currentCard} \n        setCardPile={setCardPile} cardPile={cardPile}></ControlButtons>\n        <FlashCardViewer currentCard={currentCard}></FlashCardViewer>\n      </Row>\n      <EditFlashCards cardPile={cardPile} setCardPile={setCardPile}></EditFlashCards>\n      {/* <Row>\n        <Button onClick={()=>{\n          console.log(`cardPile: ${JSON.stringify(cardPile)}`);\n        }\n        }>Testing button</Button>\n      </Row> */}\n    </Container>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}