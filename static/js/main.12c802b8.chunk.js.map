{"version":3,"sources":["components/FlashCardViewer.tsx","components/ControlButtons.tsx","components/EditFlashCards.tsx","components/CardTable.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["FlashCardViewer","currentCard","Col","Card","bg","isFront","text","Header","Body","Text","front","back","ControlButtons","setCurrentCard","setCardPile","cardPile","Container","Row","xs","className","Button","onClick","flippedCard","currInd","indexOf","newPile","variant","tmpCard","nextInd","length","tmpPile","EditFlashCards","useState","newFront","setNewFront","newBack","setNewBack","newCurrCard","setNewCurrCard","currCardIsEdit","setCurrCardIsEdit","oneCard","setOneCard","editNewCurrCard","newContent","frontOrBack","style","textAlign","Form","Group","controlId","Label","Control","type","placeholder","onChange","event","target","value","newCard","id","splice","localStorage","setItem","JSON","stringify","Modal","show","onHide","closeButton","Title","Footer","CardTable","scope","map","card","index","INITIAL_CARDS","getLocalCards","rawCards","getItem","parse","App","href","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.12c802b8.chunk.js","sourcesContent":["import { Col, Card } from \"react-bootstrap\";\r\nimport { flashCard } from \"../interfaces/flashCard\";\r\n\r\n\r\n\r\nexport function FlashCardViewer({currentCard}: {currentCard: flashCard}): JSX.Element {\r\n\r\n    function getCardHeader(): string {\r\n        if (currentCard.isFront) {\r\n            return \"Flashcard Front\";\r\n        } else {\r\n            return \"Flashcard Back\";\r\n        }\r\n    }\r\n\r\n    function getCardBg(): string {\r\n        if (currentCard.isFront) {\r\n            return \"primary\";\r\n        } else {\r\n            return \"danger\";\r\n        }\r\n    }\r\n\r\n    return <Col>\r\n        <Card bg={getCardBg()} text=\"light\" data-testid=\"flashcard\">\r\n            <Card.Header>{getCardHeader()}</Card.Header>\r\n            <Card.Body>\r\n                {currentCard.isFront && <Card.Text>\r\n                    {currentCard.front}\r\n                </Card.Text>}\r\n                {!currentCard.isFront &&<Card.Text>\r\n                    {currentCard.back}\r\n                </Card.Text>}\r\n            </Card.Body>\r\n        </Card>\r\n    </Col>\r\n}","import { Button, Col, Container, Row } from \"react-bootstrap\";\r\nimport { flashCard } from \"../interfaces/flashCard\";\r\n\r\nexport function ControlButtons({setCurrentCard, currentCard, setCardPile, cardPile}: {\r\n        setCurrentCard: (f: flashCard) => void, \r\n        currentCard: flashCard,\r\n        setCardPile: (f: flashCard[]) => void,\r\n        cardPile: flashCard[]\r\n    }): JSX.Element {\r\n    \r\n    function flipCard() {\r\n        let flippedCard: flashCard = {...currentCard};\r\n        flippedCard.isFront = !flippedCard.isFront;\r\n        setCurrentCard(flippedCard);\r\n        let currInd: number = cardPile.indexOf(currentCard,0);\r\n        let newPile: flashCard[] = [...cardPile];\r\n        newPile[currInd] = flippedCard;\r\n        setCardPile(newPile);\r\n    }\r\n\r\n    // Go to next card by index in cardPile\r\n    function nextCard() {\r\n        let tmpCard: flashCard = currentCard;\r\n        let currInd: number = cardPile.indexOf(currentCard,0);\r\n        let nextInd: number = (currInd + 1) % cardPile.length;\r\n        setCurrentCard(cardPile[nextInd]);\r\n\r\n        // Reset previous card to be face up\r\n        tmpCard.isFront = true;\r\n        let tmpPile: flashCard[] = [...cardPile];\r\n        tmpPile[currInd] = tmpCard;\r\n        setCardPile(tmpPile);\r\n    }\r\n\r\n    return <Col>\r\n        <Container>\r\n            <Row>\r\n                <Col></Col>\r\n                <Col xs={8}>\r\n                    <div className=\"d-grid gap-2\">\r\n                        <Button onClick={flipCard} variant=\"primary\" className=\"m-2 p-2\">Flip Card</Button>\r\n                    </div>\r\n                </Col>\r\n                <Col></Col>            \r\n            </Row>\r\n            <Row>\r\n                <Col></Col>\r\n                <Col xs={8}>\r\n                    <div className=\"d-grid gap-2\">\r\n                        <Button onClick={nextCard} variant=\"primary\" className=\"m-2 p-2\">Next Card</Button>\r\n                    </div>\r\n                </Col>\r\n                <Col></Col>\r\n            </Row>\r\n        </Container>\r\n    </Col>\r\n}","import React, { useState } from \"react\";\r\nimport { Modal, Button, Col, Container, Form, Row } from \"react-bootstrap\";\r\nimport { flashCard } from \"../interfaces/flashCard\";\r\n\r\nconst LOCAL_STORAGE_CARDS = 'flash-cards';\r\n\r\nexport function EditFlashCards({cardPile, setCardPile, currentCard, setCurrentCard}: {\r\n    cardPile: flashCard[], \r\n    setCardPile: (f: flashCard[])=>void,\r\n    currentCard: flashCard,\r\n    setCurrentCard: (f: flashCard)=>void}): JSX.Element {\r\n\r\n    // Adding new card with form\r\n    const [newFront, setNewFront] = useState<string>(\"Front\");\r\n    const [newBack, setNewBack] = useState<string>(\"Back\");\r\n\r\n    // Editing current card with form\r\n    const [newCurrCard, setNewCurrCard] = useState<flashCard>({...currentCard});\r\n    const [currCardIsEdit, setCurrCardIsEdit] = useState<boolean>(false);\r\n\r\n    // Boolean, true when only one card is left in the pile\r\n    const [oneCard, setOneCard] = useState<boolean>(false);\r\n\r\n    function saveCards(): void {\r\n        localStorage.setItem(LOCAL_STORAGE_CARDS,JSON.stringify(cardPile));\r\n    }\r\n\r\n    function addCard(): void {\r\n        let newId: number = cardPile[cardPile.length-1].id + 1;\r\n        let newCard: flashCard = {\r\n            id: newId,\r\n            front: newFront,\r\n            back: newBack,\r\n            isFront: true\r\n        }\r\n        setCardPile([...cardPile, newCard]);\r\n\r\n        // Set current card to new card\r\n        setCurrentCard(newCard);\r\n    }\r\n\r\n    // Set newCurrCard state as form is editted\r\n    function editNewCurrCard(newContent: string, frontOrBack: boolean): void {\r\n        let tmpCard: flashCard = {...newCurrCard};\r\n        if (frontOrBack) {\r\n            tmpCard.front = newContent;\r\n        } else {\r\n            tmpCard.back = newContent;\r\n        }\r\n        setNewCurrCard(tmpCard);\r\n        setCurrCardIsEdit(true);\r\n    }\r\n    \r\n    // Push changes to current card (setCurrentCard and setCardPile)\r\n    function saveNewCurrCard() {\r\n        if (!currCardIsEdit) {\r\n            // Don't save new card if it was not editted\r\n            return;\r\n        }\r\n        let tmpCard: flashCard = {...newCurrCard};\r\n        let currInd: number = cardPile.indexOf(currentCard,0);\r\n        let newPile: flashCard[] = [...cardPile];\r\n        newPile[currInd] = tmpCard;\r\n        setCardPile(newPile);     \r\n        setCurrentCard(tmpCard);  \r\n        setCurrCardIsEdit(false); \r\n    }\r\n\r\n    // Delete current card\r\n    // set current card to next index and update cardPile\r\n    function deleteCurrCard() {\r\n        if (cardPile.length > 1) {\r\n            let currInd: number = cardPile.indexOf(currentCard,0);\r\n            let nextInd: number = (currInd + 1) % cardPile.length;\r\n            setCurrentCard(cardPile[nextInd]);\r\n\r\n            let tmpPile: flashCard[] = [...cardPile];\r\n            tmpPile.splice(currInd,1);\r\n            setCardPile(tmpPile);\r\n        } else {\r\n            // some warning about being on the last card\r\n            setOneCard(true);\r\n        }\r\n    }\r\n\r\n    return <Container className=\"mt-4 border border-4 p-2 rounded\">\r\n        <Row>\r\n            {/* Add new card */}\r\n            <Col style={{textAlign: \"left\"}}>\r\n                <Row>\r\n                    <Col style={{textAlign: \"center\"}}>\r\n                        <h4>Add a new card</h4>\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                    <Col>\r\n                        <Form>\r\n                            <Form.Group className=\"mb-1\" controlId=\"newCardFront\">\r\n                                <Form.Label>Front</Form.Label>\r\n                                <Form.Control type=\"text\" placeholder=\"card front\" data-testid=\"newCardFrontIn\"\r\n                                onChange={(event: React.ChangeEvent<HTMLTextAreaElement>) => {\r\n                                    setNewFront(event.target.value);\r\n                                }} />\r\n                            </Form.Group>\r\n\r\n                            <Form.Group className=\"mb-2\" controlId=\"newCardBack\">\r\n                                <Form.Label>Back</Form.Label>\r\n                                <Form.Control type=\"text\" placeholder=\"card back\" data-testid=\"newCardBackIn\" \r\n                                onChange={(event: React.ChangeEvent<HTMLTextAreaElement>) => {\r\n                                    setNewBack(event.target.value);\r\n                                }} />\r\n                            </Form.Group>\r\n                            <Button onClick={addCard} variant=\"secondary\" type=\"reset\">Add Flash Card</Button>\r\n                        </Form>\r\n                    </Col>\r\n                </Row>\r\n            </Col>\r\n\r\n            {/* Edit Current Card */}\r\n            <Col style={{textAlign: \"left\"}}>\r\n                <Row>\r\n                <Col style={{textAlign: \"center\"}}>\r\n                        <h4>Edit the current card</h4>\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                    <Col>\r\n                        <Form>\r\n                            <Form.Group className=\"mb-1\" controlId=\"newCurrFront\">\r\n                                <Form.Label>Front</Form.Label>\r\n                                <Form.Control type=\"text\"\r\n                                onChange={(event: React.ChangeEvent<HTMLTextAreaElement>) => {\r\n                                    editNewCurrCard(event.target.value,true);\r\n                                }} />\r\n                            </Form.Group>\r\n\r\n                            <Form.Group className=\"mb-2\" controlId=\"newCurrBack\">\r\n                                <Form.Label>Back</Form.Label>\r\n                                <Form.Control type=\"text\"\r\n                                onChange={(event: React.ChangeEvent<HTMLTextAreaElement>) => {\r\n                                    editNewCurrCard(event.target.value,false);\r\n                                }} />\r\n                            </Form.Group>\r\n                            <Button onClick={saveNewCurrCard} variant=\"secondary\" type=\"reset\">Save Current Card</Button>\r\n                            <Button onClick={deleteCurrCard} variant=\"secondary\" className=\"ms-2 me-2\" type=\"reset\">Delete Current Card</Button>\r\n                        </Form>\r\n                    </Col>\r\n                </Row>            \r\n            </Col>\r\n        </Row>\r\n        <Row>\r\n        <Col></Col>\r\n            <Col xs={8}>\r\n                <div className=\"d-grid gap-2\">\r\n                    <Button onClick={saveCards} variant=\"primary\" className=\"mt-4\">Save Cards</Button>\r\n                </div>\r\n            </Col>\r\n            <Col></Col>\r\n        </Row>   \r\n    \r\n        <Modal show={oneCard} onHide={()=>{setOneCard(false)}}>\r\n            <Modal.Header closeButton>\r\n            <Modal.Title>Only one card left!</Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Body>You cannot delete the current card. It is the only remaining card.</Modal.Body>\r\n            <Modal.Footer>\r\n            <Button onClick={()=>{setOneCard(false)}} variant=\"secondary\">\r\n                Close\r\n            </Button>\r\n            </Modal.Footer>\r\n        </Modal>\r\n    </Container>    \r\n}","import { Col, Container, Row } from \"react-bootstrap\";\r\nimport { flashCard } from \"../interfaces/flashCard\";\r\n\r\nexport function CardTable({cardPile}: {cardPile: flashCard[]}) {\r\n\r\n    return (<Container className=\"mt-4\">\r\n        <Row>\r\n        <Col style={{textAlign: \"center\"}}>\r\n            <h4 className=\"fw-bold\">List of Flashcards</h4>\r\n        </Col>\r\n        </Row>\r\n        <Row>\r\n        <Col>\r\n            <table className=\"table\">\r\n            <thead>\r\n                <tr>\r\n                <th scope=\"col\">Front</th>\r\n                <th scope=\"col\">Back</th>\r\n                </tr>\r\n            </thead>\r\n            <tbody>\r\n                {cardPile.map( (card: flashCard, index: number) =>\r\n                    <tr key={index}>\r\n                    <td>{card.front}</td>\r\n                    <td>{card.back}</td>\r\n                    </tr>\r\n                )}\r\n            </tbody>\r\n            </table>\r\n        </Col>\r\n        </Row>\r\n    </Container> );\r\n}","import React, { useState } from 'react';\r\nimport { Container, Row, Col } from 'react-bootstrap';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport './App.css';\r\nimport { FlashCardViewer } from './components/FlashCardViewer';\r\nimport { ControlButtons } from './components/ControlButtons';\r\nimport { flashCard } from './interfaces/flashCard';\r\nimport { EditFlashCards } from './components/EditFlashCards';\r\nimport { CardTable } from './components/CardTable';\r\n\r\nconst INITIAL_CARDS: flashCard[] = [{\r\n    id: 1,\r\n    front: 'Apple',\r\n    back: 'Red',\r\n    isFront: true\r\n  },\r\n  {\r\n    id: 2,\r\n    front: 'Banana',\r\n    back: 'Yellow',\r\n    isFront: true\r\n  }]\r\n\r\nconst LOCAL_STORAGE_CARDS = 'flash-cards';\r\n\r\nfunction getLocalCards(): flashCard[] {\r\n  let rawCards: string | null = localStorage.getItem(LOCAL_STORAGE_CARDS);\r\n  // console.log(`rawCards: ${rawCards}`);\r\n  if (rawCards === null) {\r\n    return INITIAL_CARDS;\r\n  } else {\r\n    return JSON.parse(rawCards);\r\n  }\r\n}\r\n\r\nfunction App() {\r\n  const [cardPile, setCardPile] = useState<flashCard[]>(getLocalCards);\r\n  const [currentCard, setCurrentCard] = useState<flashCard>(cardPile[0]);\r\n\r\n  return (\r\n    <Container className=\"App\">\r\n      <Row>\r\n        <h1 className=\"site-title\">\r\n          <Row>\r\n            <Col>\r\n                STUDY FLASHCARDS\r\n            </Col>\r\n            <Col className=\"right-align\">\r\n              | Tim Longoria\r\n            </Col> \r\n          </Row>         \r\n        </h1>\r\n      </Row>\r\n      <Row  className=\"CardViewer\">\r\n        <ControlButtons \r\n        setCurrentCard={setCurrentCard} currentCard={currentCard} \r\n        setCardPile={setCardPile} cardPile={cardPile}></ControlButtons>\r\n        <FlashCardViewer currentCard={currentCard}></FlashCardViewer>\r\n      </Row>\r\n      <EditFlashCards cardPile={cardPile} setCardPile={setCardPile} \r\n        currentCard={currentCard} setCurrentCard={setCurrentCard}></EditFlashCards>\r\n      <Row className=\"m-4\">\r\n        <CardTable cardPile={cardPile}></CardTable>\r\n      </Row>\r\n      <Row className=\"App-footer\">\r\n        <p>\r\n          <a href=\"https://timblakel.github.io/\">Tim's Portfolio</a>\r\n        </p>\r\n      </Row>\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}